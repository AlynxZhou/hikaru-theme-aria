<!DOCTYPE html>
<html data-theme="light" lang="{{ lang or language or siteConfig.language }}">
  <head>
    <meta charset="utf-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1, maximum-scale=10">
    {% if themeConfig.color %}
    <meta name="theme-color" content="{{ themeConfig.color }}">
    <meta name="msapplication-TileColor" content="{{ themeConfig.color }}">
    {% endif %}
    {% if themeConfig.googleVerification %}
    <meta name="google-site-verification" content="{{ themeConfig.googleVerification }}">
    {% endif %}
    <meta name="author" content="{{ siteConfig.author }}">
    {% if excerpt %}
    <meta name="description" content="{{ excerpt | striptags }}">
    {% elseif description %}
    <meta name="description" content="{{ description }}">
    {% elseif siteConfig.description %}
    <meta name="description" content="{{ siteConfig.description }}">
    {% endif %}
    {% if keywords %}
    <meta name="keywords" content="{{ keywords.join(", ") }}">
    {% elseif themeConfig.keywords %}
    <meta name="keywords" content="{{ themeConfig.keywords.join(", ") }}">
    {% endif %}
    <meta name="generator" content="Hikaru v{{ getVersion() }}">
    <link rel="canonical" href="{{ getURL(docPath) }}">
    {% if themeConfig.favicon.appleTouchIcon %}
    <link rel="apple-touch-icon" sizes="180x180" href="{{ getPath(themeConfig.favicon.appleTouchIcon) }}">
    {% endif %}
    {% if themeConfig.favicon.androidChromeLarge %}
    <link rel="icon" type="image/png" sizes="192x192" href="{{ getPath(themeConfig.favicon.androidChromeLarge) }}">
    {% endif %}
    {% if themeConfig.favicon.medium %}
    <link rel="icon" type="image/png" sizes="32x32" href="{{ getPath(themeConfig.favicon.medium) }}">
    {% endif %}
    {% if themeConfig.favicon.small %}
    <link rel="icon" type="image/png" sizes="16x16" href="{{ getPath(themeConfig.favicon.small) }}">
    {% endif %}
    {% if themeConfig.favicon.safariPinnedTab %}
    <link rel="mask-icon" href="{{ getPath(themeConfig.favicon.safariPinnedTab) }}" color="{{ themeConfig.color }}">
    {% endif %}
    {% if themeConfig.favicon.androidManifest %}
    <link rel="manifest" href="{{ getPath(themeConfig.favicon.androidManifest) }}">
    {% endif %}
    {% if themeConfig.favicon.msBrowserConfig %}
    <meta name="msapplication-config" content="{{ getPath(themeConfig.favicon.msBrowserConfig) }}">
    {% endif %}
    {% if themeConfig.favicon.fallback %}
    <link rel="shortcut icon" type="image/x-icon" href="{{ getPath(themeConfig.favicon.fallback) }}">
    {% endif %}
    {% if siteConfig.feed.enable %}
    <link rel="alternate" href="{{ getPath(siteConfig.feed.path) }}" title="{{ siteConfig.title }}" type="application/atom+xml">
    {% endif %}
    {% if themeConfig.customFont.enable and themeConfig.customFont.link %}
    <link rel="stylesheet" type="text/css" href="{{ themeConfig.customFont.link }}">
    {% endif %}
    <link rel="stylesheet" type="text/css" href="{% if themeConfig.libCDN.enable and themeConfig.libCDN.normalize %}{{ themeConfig.libCDN.normalize }}{% else %}{{ getPath("css/normalize.css") }}{% endif %}">
    <link rel="stylesheet" type="text/css" href="{{ getPath("css/variables.css") }}">
    <link rel="stylesheet" type="text/css" href="{{ getPath("css/index.css") }}">
    <link rel="stylesheet" type="text/css" href="{{ getPath("css/custom.css") }}">
    <link rel="stylesheet" type="text/css" href="{% if themeConfig.libCDN.enable and themeConfig.libCDN.bootstrapIcons.css %}{{ themeConfig.libCDN.bootstrapIcons.css }}{% else %}{{ getPath("css/bootstrap-icons.css") }}{% endif %}">
    <link rel="stylesheet" type="text/css" href="{% if themeConfig.libCDN.enable and themeConfig.libCDN[themeConfig.highlight] %}{{ themeConfig.libCDN[themeConfig.highlight] }}{% else %}{{ getPath("css/" + themeConfig.highlight + ".css") }}{% endif %}">
    <style type="text/css">
      :root {
        --url-sidebar-background: url("{{ getPath("images/background.webp") }}");
        --url-dark-sidebar-background: url("{{ getPath("images/background-dark.webp") }}");
        {% if themeConfig.customFont.enable %}
        {% if themeConfig.customFont.all %}
        --font-all: {{ themeConfig.customFont.all }}, var(--font-sans);
        {% endif %}
        {% if themeConfig.customFont.title %}
        --font-title: {{ themeConfig.customFont.title }}, var(--font-sans);
        {% endif %}
        {% if themeConfig.customFont.subtitle %}
        --font-subtitle: {{ themeConfig.customFont.subtitle }}, var(--font-sans);
        {% endif %}
        {% if themeConfig.customFont.main %}
        --font-main: {{ themeConfig.customFont.main }}, var(--font-sans);
        {% endif %}
        {% if themeConfig.customFont.code %}
        --font-code: {{ themeConfig.customFont.code }}, var(--font-mono), var(--font-sans);
        {% endif %}
        {% endif %}
      }
      {% if themeConfig.sidebar === "left" %}
      div.main-container {
        flex-direction: row-reverse;
      }
      {% endif %}
      /* Replace the default Bootstrap Icons fonts path. */
      @font-face {
        font-family: "bootstrap-icons";
        src: url("{% if themeConfig.libCDN.enable and themeConfig.libCDN.bootstrapIcons.woff2 %}{{ themeConfig.libCDN.bootstrapIcons.woff2 }}{% else %}{{ getPath("fonts/bootstrap-icons.woff2") }}{% endif %}") format("woff2"), url("{% if themeConfig.libCDN.enable and themeConfig.libCDN.bootstrapIcons.woff %}{{ themeConfig.libCDN.bootstrapIcons.woff }}{% else %}{{ getPath("fonts/bootstrap-icons.woff") }}{% endif %}") format("woff");
      }
    </style>
    {% block css %}{% endblock %}
    {# You should not set `defer` to `index.js` because other scripts depends it for `documentReady()`! #}
    <script type="text/javascript" src="{{ getPath("js/index.js") }}"></script>
    <script defer type="text/javascript" src="{{ getPath("js/scrollspy.js") }}"></script>
    <script defer type="text/javascript" src="{{ getPath("js/custom.js") }}"></script>
    <script defer type="text/javascript" src="{% if themeConfig.libCDN.enable and themeConfig.libCDN.clipboard %}{{ themeConfig.libCDN.clipboard }}{% else %}{{ getPath("js/clipboard.min.js") }}{% endif %}"></script>
    {% if themeConfig.busuanzi %}
    <script defer type="text/javascript" src="{% if themeConfig.libCDN.enable and themeConfig.libCDN.busuanzi %}{{ themeConfig.libCDN.busuanzi }}{% else %}{{ getPath("js/busuanzi.pure.mini.js") }}{% endif %}"></script>
    {% endif %}
    {% if themeConfig.mathjax.cdn and themeConfig.mathjax.enable %}
    {% if themeConfig.mathjax.global or mathjax %}
    <script defer type="text/javascript" src="{{ themeConfig.mathjax.cdn }}"></script>
    <script type="text/x-mathjax-config">
      documentReady(() => {
        MathJax.Hub.Config({
          "tex2jax": {
            "inlineMath": [["$", "$"], ["\\(", "\\)"]],
            "processEscapes": true,
            "skipTags": ["script", "noscript", "style", "textarea", "pre", "code"]
          }
        });
        MathJax.Hub.Queue(() => {
          const all = MathJax.Hub.getAllJax();
          for (const jax of all) {
            jax.SourceElement().parentNode.classList.add("has-jax");
          }
        });
      });
    </script>
    {% endif %}
    {% endif %}
    {# If user choose to use Hikaru's builtin highlight, hljs is only used by issue comment. #}
    {% if siteConfig.highlight.enable !== true or (themeConfig.comment.issue.enable and comment !== false) %}
    <script defer type="text/javascript" src="{% if themeConfig.libCDN.enable and themeConfig.libCDN.highlight %}{{ themeConfig.libCDN.highlight }}{% else %}{{ getPath("js/highlight.min.js") }}{% endif %}"></script>
    <script type="text/javascript">
      documentReady(() => {
        elementsEach(
          document.querySelectorAll("figure.code-block pre.code code"),
          (e, i) => {
            // We want to use hljs' background and color for the whole block.
            e.parentNode.parentNode.classList.add("hljs");
            hljs.highlightElement(e);
          }
        );
      });
    </script>
    {% endif %}
    {% if siteConfig.highlight.gutter !== true %}
    <script type="text/javascript">
      documentReady(() => {
        elementsEach(
          document.querySelectorAll("figure.code-block pre.code"),
          (e, i) => {
            const code = e.parentNode.getAttribute("data-raw");
            const gutter = [];
            gutter.push("<pre class=\"gutter\">");
            // Highlight should not change lines.
            // But may replace `\n` with `<br>`, so use original code here.
            const codeLines = code.split(/\r?\n/g);
            // It seems marked.js starts to keep the last `\n`,
            // which will leave an empty line after splitting,
            // and we should not add gutter for the last empty line.
            // Don't do trim here! We only skip empty line.
            if (codeLines[codeLines.length - 1].length === 0) {
              codeLines.pop();
            }
            for (let i = 0; i < codeLines.length; ++i) {
              gutter.push(`<span class="line-number">${i + 1}</span>`);
              if (i !== codeLines.length - 1) {
                gutter.push("\n");
              }
            }
            gutter.push("</pre>");
            elementBefore(e, createElementFromString(gutter.join("")));
          }
        );
      });
    </script>
    {% endif %}
    <script type="text/javascript">
      // Set theme before page rendering.
      // Check user's choice from localStorage.
      let theme = window.localStorage.getItem("theme");
      const preferenceQuery = window.matchMedia("(prefers-color-scheme: dark)");
      // theme might be null here.
      if (theme !== "dark" && theme !== "light") {
        // Init from user's system settings if no choice.
        theme = preferenceQuery.matches ? "dark" : "light";
      }
      // Yes, it looks I can modify documentElement before ready!
      // Don't use requestAnimationFrame here, it will cause flickering.
      document.documentElement.setAttribute("data-theme", theme);
      window.localStorage.setItem("theme", theme);
      documentReady(() => {
        const themeToggle = document.getElementById("theme-toggle");
        const setThemeToggle = (themeToggle, theme) => {
          themeToggle.innerHTML = theme === "dark"
            ? "<i class=\"bi bi-moon\" aria-label=\"{{ __("accessibility.darkTheme") }}\"></i>"
            : "<i class=\"bi bi-sun\" aria-label=\"{{ __("accessibility.lightTheme") }}\"></i>";
        };
        // Update theme toggle content.
        setThemeToggle(themeToggle, theme);
        // User changed system settings, update.
        preferenceQuery.addListener((event) => {
          theme = event.matches ? "dark" : "light";
          setThemeToggle(themeToggle, theme);
          window.requestAnimationFrame(() => {
            document.documentElement.setAttribute("data-theme", theme);
          });
          window.localStorage.setItem("theme", theme);
        });
        // Other page of site changed storage, update.
        window.addEventListener("storage", (event) => {
          if (event.key === "theme" && event.newValue !== event.oldValue) {
            theme = event.newValue;
            setThemeToggle(themeToggle, theme);
            window.requestAnimationFrame(() => {
              document.documentElement.setAttribute("data-theme", theme);
            });
          }
        });
        // User changed website settings, update.
        themeToggle.addEventListener("click", (event) => {
          theme = theme === "dark" ? "light" : "dark";
          setThemeToggle(themeToggle, theme);
          window.requestAnimationFrame(() => {
            document.documentElement.setAttribute("data-theme", theme);
          });
          window.localStorage.setItem("theme", theme);
        });
        // https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat
        // A modern way to show date in user's format.
        // But it shows date only by default, no time.
        const formatter = new Intl.DateTimeFormat(
          "{{ siteConfig["language"] }}",
          {
            "year": "numeric",
            "month": "2-digit",
            "day": "2-digit",
            "weekday": "short",
            "hour": "2-digit",
            "minute": "2-digit",
            "second": "2-digit",
            "timeZoneName": "short",
            "hour12": false
          }
        );
        elementsEach(
          document.querySelectorAll("time.post-full-date"),
          (e, i) => {
            const date = new Date(e.getAttribute("datetime"));
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/DateTimeFormat/formatToParts
            const parts = formatter.formatToParts(date);
            const obj = {};
            for (let {type, value} of parts) {
              obj[type] = value;
            }
            e.innerHTML = `${obj["year"]}-${obj["month"]}-${obj["day"]} ${obj["weekday"]} ${obj["hour"]}:${obj["minute"]}:${obj["second"]} ${obj["timeZoneName"]}`;
          }
        );
        elementsEach(
          document.querySelectorAll(".post figure.code-block"),
          (e, i) => {
            const lang = e.getAttribute("data-lang");
            elementBefore(e, createElementFromString([
              "<div class=\"code-titlebar\">",
                "<div class=\"titlebar-left\">",
                  "<button class=\"copy\" aria-label=\"{{ __("clipboard.copy") }}\"><i class=\"bi bi-clipboard2-plus\"></i></button>",
                "</div>",
                "<div class=\"titlebar-center\">",
                  lang != null && lang.length ? lang.toUpperCase() : "{{ __("code") }}",
                "</div>",
                "<div class=\"titlebar-right\">",
                  "<button class=\"button-dot dot-minimize\" aria-label=\"Decoration\"></button>",
                  "<button class=\"button-dot dot-maximize\" aria-label=\"Decoration\"></button>",
                  "<button class=\"button-dot dot-close\" aria-label=\"Decoration\"></button>",
                "</div>",
              "</div>"
            ].join("")));
          }
        );
        const cb = new ClipboardJS("button.copy", {
          "target": (trigger) => {
              // Get target element by DOM API.
              // trigger.parentNode.parentNode is code-titlebar.
              // nextElementSibling is figure.highlight, lastChild is pre.code.
              return trigger.parentNode.parentNode.nextElementSibling.lastChild;
          }
        });
        cb.on("success", (e) => {
          e.clearSelection();
          const trigger = e.trigger;
          // Change button text as a user tip.
          trigger.innerHTML = "<i class=\"bi bi-clipboard2-check\"></i>";
          trigger.classList.add("copied");
          // Change button text back;
          window.setTimeout(() => {
            trigger.innerHTML = "<i class=\"bi bi-clipboard2-plus\"></i>";
            trigger.classList.remove("copied");
          }, 1500);
        });
      });
    </script>
    {% block js %}{% endblock %}
    <title>{% block title %}{% endblock %}</title>
  </head>
  <body itemscope itemtype="http://schema.org/WebPage">
    {% include "includes/header.njk" %}
    <main id="main" class="main">
      <div class="container">
        <div class="main-container">
          <div class="content">
            {% block content %}{% endblock %}
          </div>
          {# Sidebar can be `left`, `right` or `false`. #}
          {% if themeConfig.sidebar !== false %}
          {% include "includes/sidebar.njk" %}
          {% endif %}
        </div>
      </div>
    </main>
    {% include "includes/footer.njk" %}
  </body>
</html>
<!-- Page built by Hikaru v{{ getVersion() }} at {{ decorateDate.toISOString() }}. -->
